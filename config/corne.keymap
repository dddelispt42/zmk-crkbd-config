/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
// #include <dt-bindings/zmk/mouse.h>

#define QWERTY 0
#define NUMNAV 1
#define SYMBOL 2
#define FUNADJ 3
#define CONFIG 4
#define BLUETH 5
#define MSOUTL 6
#define LOCK   7

#define COMBO_TIMEOUT 50
#define MACRO_TAP 10
#define MACRO_WAIT 0

// TODO: tap dance for C_BRI_UP/MAX DN/MIN
// TODO: align with QMK keymaps
// TODO: check mouse.h - maybe only missing in documen
// TODO: add mouse support - if available in ZMK - or reconfig layer
// TODO: add generic mechansim to lock layers

/ {
// ---------------------------------------------------------------
// |    |  1 |  2 |  3 |  4 |  5 | |  6 |  7 |  8 |  9 | 10 |    |
// |    | 13 | 14 | 15 | 16 | 17 | | 18 | 19 | 20 | 21 | 22 |    |
// |    | 25 | 26 | 27 | 28 | 29 | | 30 | 31 | 32 | 33 | 34 |    |
// |    |    |    | 36 | 37 | 38 | | 39 | 40 | 41 |    |    |    |
    combos {
        compatible = "zmk,combos";
        combo_toggle_lock_left {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <1 5 38>;
                  bindings = <&tog LOCK>;
        };
        combo_toggle_lock_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <6 10 39>;
                  bindings = <&tog LOCK>;
        };
        combo_esc {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <1 2>;
                  bindings = <&kp ESC>;
        };
        combo_tab {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <4 5>;
                  bindings = <&kp TAB>;
        };
        combo_ret {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <6 7>;
                  bindings = <&kp RET>;
        };
    };

    macros {
        ZMK_MACRO(m_fyi,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&sk LCTRL &kp F &sk LCTRL &kp O &sk LCTRL &kp S &kp R &kp D &kp N &kp M &kp S &kp S &kp A>
                    , <&macro_wait_time 400>
                    , <&sk LSHIFT &kp TAB>
                    , <&macro_wait_time 300>
                    , <&sk LSHIFT &kp TAB>
                    , <&macro_wait_time 100>
                    , <&sk LSHIFT &kp TAB>
                    , <&macro_wait_time 100>
                    , <&sk LSHIFT &kp TAB>
                    , <&macro_wait_time 100>
                    , <&sk LSHIFT &kp TAB>
                    , <&sk LSHIFT &kp F &sk LSHIFT &kp Y &sk LSHIFT &kp I>
                    ;
                )
        ZMK_MACRO(m_today,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F2>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_week,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F3>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_month,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F4>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_proc,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N2>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_arch,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N3>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_plm,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N4>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_lt,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N5>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_cust,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N6>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_info,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N7>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_env,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N8>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_choose,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N9>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        urm: upper_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "UPPER_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };
        /* lkm: layer_key_mods { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "LAYER_KEY_MODS"; */
        /*     #binding-cells = <2>; */
        /*     tapping-term-ms = <200>; */
        /*     quick_tap_ms = <200>; */
        /*     flavor = "hold-preferred"; */
        /*     bindings = <&mo>, <&kp>; */
        /* }; */
        tdcaps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_caps";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&kp LSHIFT>, <&kp CAPS>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
//    -----------------------------------------------------------------------------------------
//     |        |   Q   |   W   | E/L6  | R/L5  | T/L4  |     | Y/L4  |  U/L5  | I/L6  |   O   |   P   |        |
//     |        | A/LG  | S/LC  | D/LA  | F/LS  |   G   |     |   H   |  J/RS  | K/LA  | L/LC  | ;/RG  |        |
//     |        | Z/LS  | X/RC  | C/RA  |   V   |   B   |     |   N   |   M    | ,/RA  | ./RC  | //MENU|        |
//                      |  /LG  |  L1   | S/LC  |                     | SPACE  |  L2   | \/LG  |
                        bindings = <
&none &kp Q   &kp W   &urm MSOUTL E   &urm BLUETH R   &urm CONFIG T             &urm CONFIG Y   &urm BLUETH U    &urm MSOUTL I   &kp O   &kp P   &none
&none &hm LGUI A &hm LCTRL S &hm LALT D &hm LSHFT F &kp G     &kp H &hm RSHFT J &hm LALT K &hm LCTRL L &hm RGUI SEMI &none
&none &kp Z &hm RCTRL X &hm RALT C &kp V       &kp B          &kp N   &kp M   &hm RALT COMMA &hm RCTRL DOT &hm K_CMENU FSLH &none
                        &kp TAB  &mo NUMNAV  &kp BSPC              &kp SPACE &mo SYMBOL &kp ESC
                        >;
                };

                numnav_layer {
                        label = "NUMNAV";
//    -----------------------------------------------------------------------------------------
//     |        |   1   |   2   |   3   |   4   |   5   |     |   6   |   7   |   8   |   9   |   0   |        |
//     |        |       |       |       |       |       |     | LFT/RS| DWN/LA|  UP/LC|  GT/LG|       |        |
//     |        |       |       |       |       |       |     |   «   |   º   |       |       |       |        |
//                              |       |       |       |     |       | RET/L3|       |
                        bindings = <
 &none &kp N1  &kp N2  &kp N3  &kp N4  &kp N5        &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
 &none &trans &trans &trans &trans &kp ESC &kp LEFT &hm RSHFT DOWN &hm LALT UP &hm LCTRL RIGHT &trans &none
 &none &trans &trans &trans &trans &kp TAB    &kp EQUAL  &kp SQT  &trans  &trans  &trans  &none
                            &to NUMNAV  &trans  &trans        &trans &mo FUNADJ &to QWERTY
                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
//    -----------------------------------------------------------------------------------------
//     |        |   !   |   @   |   #   |   $   |   %   |     |   ^   |   &   |   *   |   (   |   )   |        |
//     |        |   <   |   [   |   {   |   (   |   `   |     |   -   |   =   |   {   |   }   | " | " |        |
//     |        |   >   |   ]   |   }   |   )   |   ~   |     |   _   |   +   |   [   |   ]   |   \   |        |
//                              |       |  L3   |  DEL  |     |       |       |       |
                        bindings = <
  &none   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &none
  &none &hm LGUI NON_US_BSLH &hm LCTRL RA(N8) &hm LALT RA(N7) &hm LSHFT STAR &kp RBKT  &kp MINUS &hm RSHFT GRAVE &hm LALT LBRC &hm LCTRL RBRC &hm LGUI PIPE &none
  &none &hm RGUI LS(NON_US_BSLH) &hm RCTRL RA(N9) &hm RALT RA(N0) &kp LPAR   &kp BSLH  &kp UNDER &kp TILDE  &hm RALT LBKT &hm RCTRL RBKT &hm RGUI BSLH &none
                        &trans &mo FUNADJ &hm RCTRL DEL   &trans  &trans   &trans
                        >;
                };

                funadj_layer {
                        label = "FUNADJ";
// -----------------------------------------------------------------------------------------
// |      | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |      |
// |      | F11 | F12 | F13 | F14 | F15 |   | F16 | F17 | F18 | F19 | F20 |      |
// |      |PSCRN|SLCK |BREAK|     | CAPS|   | HOME| PDN | PUP | END | INS |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
&none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5   &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &none
&none &hm LGUI F11 &hm LCTRL F12 &hm LALT F13 &hm LSHFT F14 &kp F15  &kp F16 &hm RSHFT F17 &hm LALT F18 &hm LCTRL F19 &hm LGUI F20 &none
&none &hm RGUI PSCRN &hm RCTRL SLCK &hm RALT PAUSE_BREAK &trans &kp CAPS  &kp HOME &kp PG_DN &hm RALT PG_UP &hm RCTRL END &hm RGUI INS &none
                       &to FUNADJ &trans &trans  &trans &trans &to QWERTY
                        >;
                };

                config_layer {
                        label = "CONFIG";
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 &none &trans &trans &trans &trans &trans  &kp C_VOL_UP &kp C_NEXT &kp C_BRI_UP &trans &trans &none
 &none &trans &trans &trans &trans &trans  &kp C_VOL_DN &kp C_PREV &kp C_BRI_DN &trans &trans &none
 &none &kp C_PWR &kp C_SLEEP &kp K_LOCK &trans &trans  &kp C_MUTE &trans &kp C_PP &trans &kp C_EJECT &none
                &trans &bootloader &reset   &reset &bootloader &trans
                        >;
                };

                bt_layer {
                        label = "BLUETH";
                        bindings = <
 &none   &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &none
 &none &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
 &none &trans &trans &out OUT_USB &out OUT_BLE &bt BT_CLR    &bt BT_CLR  &out OUT_BLE  &out OUT_USB  &trans  &trans  &none
                      &trans &trans &trans        &trans &trans &trans
                        >;
                };

                outl_layer {
                        label = "MSOUTL";
                        bindings = <
 &none &none &none &m_env &m_proc &m_today  &none &none &m_info &none &m_plm &none
 &none &m_arch &m_choose &none &m_fyi &m_week  &none &none &none &m_lt &none &none
 &none &none &none &m_cust &none &m_month  &none &none &none &none &none &none
                     &none &none &none  &none &none &none
                        >;
                };

                lock_layer {
                        label = "LOCK";
                        bindings = <
 &none &none &none &none &none &none  &none &none &none &none &none &none
 &none &none &none &none &none &none  &none &none &none &none &none &none
 &none &none &none &none &none &none  &none &none &none &none &none &none
                     &none &none &none  &none &none &none
                        >;
                };
        };
};
