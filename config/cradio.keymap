/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>

#define QWERTY 0
#define NUMNAV 1
#define SYMBOL 2
#define FUNADJ 3
#define MOUSE  4
#define MEDIA  5
#define WMCFG  6
#define MSOUTL 7
#define MACROS 8
#define BLUETH 9
#define LOCK   10

#define COMBO_TIMEOUT 50
#define SPLIT_COMBO_TIMEOUT 75
#define MACRO_TAP 10
#define MACRO_WAIT 0

// Upper row mods macro
#define URML(k1,k2,k3,k4,k5) &urm BLUETH k1  &urm MACROS k2  &urm MSOUTL k3  &urm WMCFG  k4  &urm MEDIA k5
#define URMR(k1,k2,k3,k4,k5) &urm MEDIA k1  &urm WMCFG  k2  &urm MSOUTL k3  &urm MACROS k4  &urm BLUETH k5
// Home row mods macro
#define HRML(k1,k2,k3,k4) &hm LGUI   k1  &hm LCTRL k2  &hm LALT  k3  &hms LSHIFT k4
#define HRMR(k1,k2,k3,k4) &hms RSHIFT k1  &hm LALT  k2  &hm LCTRL k3  &hm RGUI   k4
// Lower row mods macro
#define LRML(k1,k2,k3,k4) &kp k1  &hm RCTRL k2  &hm RALT  k3  &kp k4
#define LRMR(k1,k2,k3,k4) &kp k1  &hm RALT  k2  &hm RCTRL k3  &hm K_CMENU k4

// define AHK macro keys

// upper row for WMCFG layer (i.e. macro layer #1)
#define UM1(k) &kp LS(k)
// home row for WMCFG layer (i.e. macro layer #1)
#define HM1(k) &kp LA(k)
// lower row for WMCFG layer (i.e. macro layer #1)
#define LM1(k) &kp LC(k)

// upper row for WMCFG layer (i.e. macro layer #2)
#define UM2(k) &kp LG(LS(k))
// home row for WMCFG layer (i.e. macro layer #2)
#define HM2(k) &kp LG(LA(k))
// lower row for WMCFG layer (i.e. macro layer #2)
#define LM2(k) &kp LG(LC(k))

// more macros to shorten the definitions
#define BTSEL(profile) &bt BT_SEL profile
#define BTCLR &bt BT_CLR
#define OUTUSB &out OUT_USB
#define OUTBLE &out OUT_BLE

// TODO: add generic mechanism to lock layers
// TODO: add 2x rotary encoder - use Fxx or LANG1/LANG2 as free keycodes for AHK
// TODO: add leader key: move AHK into keyboard to use all all machines - use C_AL_CALC/C_AC_SEARCH/C_AL_CAL
// TODO: add trackball
// TODO: make mouse move/scroll work again

/ {
// -------------------CORNE---------------------------------------
// |    |  1 |  2 |  3 |  4 |  5 | |  6 |  7 |  8 |  9 | 10 |    |
// |    | 13 | 14 | 15 | 16 | 17 | | 18 | 19 | 20 | 21 | 22 |    |
// |    | 25 | 26 | 27 | 28 | 29 | | 30 | 31 | 32 | 33 | 34 |    |
// |    |    |    | 36 | 37 | 38 | | 39 | 40 | 41 |    |    |    |

// -------------------SWEEP---------------------------------------
//      |  0 |  1 |  2 |  3 |  4 | |  5 |  6 |  7 |  8 |  9 |
//      | 10 | 11 | 12 | 13 | 14 | | 15 | 16 | 17 | 18 | 19 |
//      | 20 | 21 | 22 | 23 | 24 | | 25 | 26 | 27 | 28 | 29 |
//                     | 30 | 31 | | 32 | 33 |
    combos {
        compatible = "zmk,combos";
        combo_toggle_lock_left {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <0 4 31>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY LOCK>;
                  bindings = <&tog LOCK>;
        };
        combo_toggle_lock_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <5 9 32>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY LOCK>;
                  bindings = <&tog LOCK>;
        };
        combo_esc {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <0 1>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <120>;
                  layers = <QWERTY>;
                  bindings = <&kp ESC>;
        };
        combo_tab {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <10 11>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <120>;
                  layers = <QWERTY>;
                  bindings = <&kp TAB>;
        };
        combo_ret {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <5 6>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <120>;
                  layers = <QWERTY>;
                  bindings = <&kp RET>;
        };
        combo_at {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <21 22>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <120>;
                  layers = <QWERTY>;
                  bindings = <&kp RA(N2)>;
        };
        combo_capsword {
                  timeout-ms = <SPLIT_COMBO_TIMEOUT>;
                  key-positions = <14 15>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <120>;
                  layers = <QWERTY>;
                  // bindings = <&kp CAPS>;
                  bindings = <&capsw>;
        };
        combo_bspc {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <6 7 8>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <100>;
                  layers = <QWERTY>;
                  bindings = <&kp BSPC>;
        };
        combo_ctrlbspc {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <16 17 18>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  bindings = <&kp LC(BSPC)>;
        };
        combo_altbspc {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <26 27 28>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  bindings = <&kp LA(BSPC)>;
        };
        combo_del {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <7 8 9>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <100>;
                  layers = <QWERTY>;
                  bindings = <&kp DEL>;
        };
        combo_ctrldel {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <17 18 19>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  bindings = <&kp LC(DEL)>;
        };
        combo_altdel {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <27 28 29>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  bindings = <&kp LA(DEL)>;
        };
        combo_repeat_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <15 16>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&key_repeat>;
        };
        // combo_umlaut {
        //           timeout-ms = <COMBO_TIMEOUT>;
        //           key-positions = <12 13>;  // NOT-FOR-CORNE
        //           require-prior-idle-ms = <150>;
        //           layers = <QWERTY>;
        //           bindings = <&hm LA(LSHIFT) RA(LBKT)>;
        // };
        combo_sz {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <22 23>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <100>;
                  layers = <QWERTY>;
                  bindings = <&kp RA(S)>;
        };
        // combo_accent {
        //           timeout-ms = <COMBO_TIMEOUT>;
        //           key-positions = <16 17>;  // NOT-FOR-CORNE
        //           require-prior-idle-ms = <150>;
        //           layers = <QWERTY>;
        //           bindings = <&hm LA(RSHIFT) RBKT>;
        // };
        // combo_tilde {
        //           timeout-ms = <COMBO_TIMEOUT>;
        //           key-positions = <26 27>;  // NOT-FOR-CORNE
        //           require-prior-idle-ms = <150>;
        //           layers = <QWERTY>;
        //           bindings = <&kp BSLH>;
        // };
        combo_pup {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <3 4>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp PG_UP>;
        };
        combo_down {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <13 14>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp PG_DN>;
        };
        combo_prtwin {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <20 21>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp PSCRN>;
        };
        combo_underscore {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <27 28>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <50>;
                  layers = <QWERTY>;
                  bindings = <&kp LS(FSLH)>;
        };
        combo_ctrlshiftx_left {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <2 3 4>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  require-prior-idle-ms = <150>;
                  bindings = <&kp LC(LS(X))>;
        };
        combo_ctrlshiftc_left {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <12 13 14>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(LS(C))>;
        };
        combo_ctrlshiftv_left {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <22 23 24>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(LS(V))>;
        };
        combo_ctrlshiftx_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <5 6 7>;  // NOT-FOR-CORNE
                  layers = <QWERTY>;
                  require-prior-idle-ms = <150>;
                  bindings = <&kp LC(LS(X))>;
        };
        combo_ctrlshiftc_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <15 16 17>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(LS(C))>;
        };
        combo_ctrlshiftv_right {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <25 26 27>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(LS(V))>;
        };
        combo_ctrla {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <0 1 2>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(A)>;
        };
        combo_ctrlz {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <10 11 12>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp LC(Z)>;
        };
        combo_leader {
                  timeout-ms = <COMBO_TIMEOUT>;
                  key-positions = <25 26>;  // NOT-FOR-CORNE
                  require-prior-idle-ms = <150>;
                  layers = <QWERTY>;
                  bindings = <&kp F23>; // INFO: F23 is ZMK leader key
        };
    };

    macros {
        ZMK_MACRO(m_today,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F2>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_week,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F3>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_month,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp F4>
                    , <&macro_release &kp LCTRL>
                    , <&macro_wait_time 300>
                    , <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N1>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_proc,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N2>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_arch,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N3>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_plm,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N4>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_lt,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N5>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_cust,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N6>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_info,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N7>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_env,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N8>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_choose,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings
                    = <&macro_press &kp LCTRL &kp LSHIFT>
                    , <&macro_tap &kp N9>
                    , <&macro_release &kp LCTRL &kp LSHIFT>
                    ;
                )
        ZMK_MACRO(m_emoj_tu,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp T &kp U &kp SPACE &kp BSPC>;
                )
        ZMK_MACRO(m_emoj_j,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp J &kp SPACE &kp BSPC>;
                )
        ZMK_MACRO(m_emoj_l,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp L &kp SPACE &kp BSPC>;
                )
        ZMK_MACRO(m_emoj_h,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp H &kp SPACE &kp BSPC>;
                )
        ZMK_MACRO(m_emoj_s,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp S &kp SPACE &kp BSPC>;
                )
        ZMK_MACRO(m_emoj_w,
                wait-ms = <MACRO_WAIT>;
                tap-ms = <MACRO_TAP>;
                bindings = <&kp RA(N9) &kp E &kp W &kp SPACE &kp BSPC>;
                )
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick_tap_ms = <210>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hms: homerow_mod_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        urm: upper_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "UPPER_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        trm: thumb_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <250>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
        capsw: behavior_caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <BACKSPACE DELETE SLASH QMARK>;  // INFO: slash=minus & qmark=underscore
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// -------------------------------------------------------------------------------
// |      |Q/L9 |W/L8 |E/L7 |R/L6 |T/L5 |   |Y/L5 |U/L6 |I/L7 |O/L8 |P/L9 |      |
// |      |A/LG |S/LC |D/LA |F/LS |  G  |   |  H  |J/RS |K/LA |L/LC |;/RG |      |
// |      |Z/LS |X/RC |C/RA |  V  |  B  |   |  N  | M   |,/RA |./RC |//MENU|     |
//              |     | L1  |S/LC |              |SPC/L4| L2  |     |
                        bindings = <
 URML(Q, W, E, R, T)        URMR(Y, U, I, O, P) 
 HRML(A, S, D, F) &kp G     &kp H HRMR(J, K, L, SEMI) 
 LRML(Z, X, C, V) &kp B     &kp N LRMR(M, COMMA, DOT, FSLH) 
   &mo NUMNAV  &kp BSPC     &trm MOUSE SPACE &mo SYMBOL 
                        >;
                };

                numnav_layer {
                        label = "NUMNAV";
// -------------------------------------------------------------------------------
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
// |      |     |     |     |     |     |   |LF/RS|DN/LA|UP/LC|RT/LG|     |      |
// |      |     |     |     |     |     |   |  «  |  º  |     |     |     |      |
//                    |     |     |     |   |     | L3  |     |
                        bindings = <
  &kp N1 &kp N2 &kp N3  &kp N4 &kp N5     &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  
  &trans &trans &trans &trans &trans      &kp LEFT HRMR(DOWN, UP, RIGHT, RIGHT) 
  &trans &trans &trans &trans &trans      &kp EQUAL  &kp SQT  &trans  &trans  &trans  
                       &trans  &trans    &trans &mo FUNADJ 
                        >;
                };

                symbol_layer {
                        label = "SYMBOL";
// -------------------------------------------------------------------------------
// |      |  !  |  "@ |  #  |  $  |  %  |   |  &^ |  /& |  (* |  )( |  =) |      |
// |      |  <  |  [  |  {  |  (  |  `  |   |  '- |  \= |  *{ |  `} |  ^| |      |
// |      |  >  |  ]  |  }  |  )  |  ~  |   |  ?_ |  |+ |  +[ |  '] |  ~\ |      |
//                    |     | L3  | DEL |   |     |     |     |
                        bindings = <
   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR 
 HRML(NON_US_BSLH, RA(N8), RA(N7), STAR) &kp RBKT  &kp MINUS HRMR(GRAVE, LBRC, RBRC, PIPE) 
 LRML(LS(NON_US_BSLH), RA(N9), RA(N0), LPAR) &kp BSLH  &kp UNDER LRMR(TILDE, LBKT, RBKT, BSLH) 
                         &mo FUNADJ &hm RCTRL DEL   &trans  &trans   
                        >;
                };

                funadj_layer {
                        label = "FUNADJ";
// -------------------------------------------------------------------------------
// |      | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |      |
// |      | F11 | F12 | F13 | F14 | F15 |   | F16 | F17 | F18 | F19 | F20 |      |
// |      |PSCRN|SLCK |BREAK|     | CAPS|   | HOME| PUP | PDN | END | INS |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5       &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
 HRML(F11, F12, F13, F14) &kp F15         &kp F16 HRMR(F17, F18, F19, F20) 
 LRML(PSCRN, SLCK, PAUSE_BREAK, CAPS) &trans  &kp HOME LRMR(PG_UP, PG_DN, END, INS) 
                        &trans &trans  &trans &trans 
                        >;
                };

                mouse_layer {
                        label = "MOUSE";
// -------------------------------------------------------------------------------
// |      |     |     |  `  |  ´  |  ^  |   |     |     |     |     |     |      |
// |      | SUP | LC  | LA  | LS  |  ¨  |   | LF  | DN  | UP  | RT  | SUP |      |
// |      | SDN | RCLK| MCLK| LCLK|  ~  |   |     | LCLK| MCLK| RCLK| SDN |      |
//                    |     |     |     |   |     |     |     |
 //  &trans &trans &kp LS(RBKT)  &kp RBKT &kp LS(BSLH)     &trans  &trans  &trans  &trans  &trans  
 //  &msc SCRL_UP &kp LCTRL &kp LALT &kp LSHIFT &kp RA(LBKT)  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT &msc SCRL_UP 
 //  &msc SCRL_DOWN &mkp RCLK &mkp MCLK &mkp LCLK &kp BSLH   &trans  &mkp LCLK &mkp MCLK &mkp RCLK &msc SCRL_DOWN 
                        bindings = <
  &trans &trans &kp LS(RBKT)  &kp RBKT &kp LS(BSLH)     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  
  &trans &kp LCTRL &kp LALT &kp LSHIFT &kp RA(LBKT)  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT &trans 
  &mkp MB4 &mkp RCLK &mkp MCLK &mkp LCLK &kp BSLH   &trans  &mkp LCLK &mkp MCLK &mkp RCLK &mkp MB4 
                       &trans  &trans     &trans &trans 
                        >;
                };

                config_layer {
                        label = "MEDIA";
// -------------------------------------------------------------------------------
// |      |     |     |     |     |     |   | VUP | NXT | BUP |     |     |      |
// |      |     |     |     |     |     |   | VDN | PRE | BDN |     |     |      |
// |      | PWR | SLP | LCK |     |     |   | MT  |     | PP  |     | EJC |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 &kp C_MEDIA_HOME &kp C_MEDIA_WWW &kp C_MEDIA_TV &kp C_MEDIA_COMPUTER &kp C_MEDIA_PHONE  &kp C_VOL_UP &kp C_NEXT &kp C_BRI_UP &kp C_FF &kp C_PWR 
 &kp C_MEDIA_GAMES &kp C_MEDIA_MESSAGES &kp C_CHANNEL_INC &kp C_CHANNEL_DEC &kp C_MEDIA_GUIDE  &kp C_VOL_DN &kp C_PREV &kp C_BRI_DN &kp C_RW &kp C_SLEEP 
 &trans &trans &trans &trans &trans  &kp C_MUTE &kp LC(LA(M)) &kp C_PP &kp C_EJECT &kp K_LOCK 
                 &trans &trans   &trans &trans 
                        >;
                };

                wmcfg_layer {
                        label = "WMCFG";
// -------------------------------------------------------------------------------
// |      |S-F13|S-F14|S-F15|S-F16|S-F17|   |S-F18|S-F19|S-F20|S-F21|S-F22|      |
// |      |A-F13|A-F14|A-F15|A-F16|A-F17|   |A-F18|A-F19|A-F20|A-F21|A-F22|      |
// |      |C-F13|C-F14|C-F15|C-F16|C-F17|   |C-F18|C-F19|C-F20|C-F21|C-F22|      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 UM1(F13) UM1(F14) UM1(F15) UM1(F16) UM1(F17) UM1(F18) UM1(F19) UM1(F20) UM1(F21) UM1(F22)  
 HM1(F13) HM1(F14) HM1(F15) HM1(F16) HM1(F17) HM1(F18) HM1(F19) HM1(F20) HM1(F21) HM1(F22)  
 LM1(F13) LM1(F14) LM1(F15) LM1(F16) LM1(F17) LM1(F18) LM1(F19) LM1(F20) LM1(F21) LM1(F22)  
                       &trans &trans        &trans &trans 
                        >;
                };

                outl_layer {
                        label = "MSOUTL";
// -------------------------------------------------------------------------------
// |      |     |     | ENV | PROC|  TD |   | CAL | 👍  | INFO| 😜  | PLM |      |
// |      | ARCH| SEL |     |S-F24|  W  |   | 😊  | 😉  | 😢  | LT  | 🤣  |      |
// |      | <-- |     | CUST|     |  M  |   | INB | NXT | PRV | FSEL| --> |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 &none &none &m_env &m_proc &m_today  &kp LC(N2) &m_emoj_tu &m_info &m_emoj_j &m_plm 
 &m_arch &m_choose &none &kp LS(F24) &m_week  &m_emoj_h &m_emoj_w &m_emoj_s &m_lt &m_emoj_l 
 &kp LS(F6) &none &m_cust &none &m_month  &kp LC(LS(I)) &kp LA(LEFT) &kp LA(RIGHT) &kp LC(LS(Y)) &kp F6 
                      &none &none  &none &none 
                        >;
                };

                macros_layer {
                        label = "MACROS";
// -------------------------------------------------------------------------------
// |      |S-F13|S-F14|S-F15|S-F16|S-F17|   |S-F18|S-F19|S-F20|S-F21|S-F22|      |
// |      |A-F13|A-F14|A-F15|A-F16|A-F17|   |A-F18|A-F19|A-F20|A-F21|A-F22|      |
// |      |C-F13|C-F14|C-F15|C-F16|C-F17|   |C-F18|C-F19|C-F20|C-F21|C-F22|      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
 UM2(F13) UM2(F14) UM2(F15) UM2(F16) UM2(F17) UM2(F18) UM2(F19) UM2(F20) UM2(F21) UM2(F22)  
 HM2(F13) HM2(F14) HM2(F15) HM2(F16) HM2(F17) HM2(F18) HM2(F19) HM2(F20) HM2(F21) HM2(F22)  
 LM2(F13) LM2(F14) LM2(F15) LM2(F16) LM2(F17) LM2(F18) LM2(F19) LM2(F20) LM2(F21) LM2(F22)  
                       &trans &trans        &trans &trans 
                        >;
                };

                bt_layer {
                        label = "BLUETH";
// -------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |      | #4  | #3  | #2  | #1  | #0  |   | #0  | #1  | #2  | #3  | #4  |      |
// |      | BL  | RST | USB | BLE | CLR |   | CLR | BLE | USB | RST | BL  |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &none  &none  &none  &none  &none        &none  &none  &none  &none  &none  
 BTSEL(4) BTSEL(3) BTSEL(2) BTSEL(1) BTSEL(0) BTSEL(0) BTSEL(1) BTSEL(2) BTSEL(3) BTSEL(4) 
 &bootloader &sys_reset OUTUSB OUTBLE BTCLR    BTCLR  OUTBLE  OUTUSB  &sys_reset  &bootloader  
                       &none &unstick        &unstick &none 
                        >;
                };

                lock_layer {
                        label = "LOCK";
                        bindings = <
 &none &none &none &none &none  &none &none &none &none &none 
 &none &none &none &none &none  &none &none &none &none &none 
 &none &none &none &none &none  &none &none &none &none &none 
                   &none &none  &none &none 
                        >;
                };
        };
};

// vim: ft=c
